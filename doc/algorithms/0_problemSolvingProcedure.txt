Overview
-Algorithmic problems share a number of similarities to the word problems that were the bane of so many students throughout their academic careers.
 Just like in word problems, it is easy to get lost in the problem when trying to make sense of all of the information that is being thrown at you
 in the problem's description. This is why it is important to have a structured procedure that can be followed to ensure that constant progress
 is being made towards the solution and that only the relevant information is used. This document details a step by step guide for solving algoirthmic
 problems.

Procedure:
1. Slow Down and Read
    -Obviously the first step is to actually read the problem. Before even considering what data to use, variables to instantiate and the solution to
     the problem, just read through the problem once so that the details can be subsconciously internalized. The analysis of what was read will take 
     place in subsequent steps.
2. Attack the Problem in Reverse
    -Read the expected output of the problem, doucment any formatting or boundary conditions that can be tested
    -Read the expected input of the problem, doucment any formatting or boundary conditions that can be tested
3. Double Tap, Questions and Tests
    -Read through the problem again slowly checking your notes against the problem and asking any questions that could clarify any areas of confusion.
    -Summarize the problem in your own words to confirm your understanding
    -Create some example test cases to confirm your understanding of the problem
4. Keep It Simple
    -Brute force the algorithm just to get it working. At the very least you have something on paper. Elegance and efficieny is nice to have in code,
     but in a real environment there is a complexity trade off for elegance in terms of readability and ease of understanding. 
    -Always write psuedo-code first that details what the solution is before transitioning to writing actual code. If the solution is simple enough its
     possible that you can skip directly to the optimized solution.
    -Test the solution
    -Identifiy Time Complexity
    -Identifiy Space Complexity
5. Ask Optimization Questions
    -Before automatically continuining onto optimizing the algorithm for Time Complexity, take a moment to ask yourself what is most important in the
     system being developed: Throughput or Memory Consumption? If the answer is Memory Consumption then optimize the space complexity and then the time 
     complexity; otherwise continue to optimizing time complexity first and then space complexity 
5. Optimize Time Complexity
    -Now that you have a solution, take a step back and rethink the approach to access whether the problem can be optimized to reduce the time complexity
        -Common solutions to reduce time complexity:
            -Algorithmic
                -Use a Hash Map, this could reduce the complexity of gets to O(1)
            -Dynamic
                -
    -Always write psuedo-code first that details what the solution is before transitioning to writing actual code. The benifit here is it serves as a psuedo
     design phase that you can walk through the logic without worrying about syntax and language restrictions, as well as, providing an outline for you when
     actually implementing the algorithm.
    -Test the solution
    -Identifiy Time Complexity
    -Identifiy Space Complexity
6. Optimize Space Complexity
    -Reexamine each variable instantiated in the problem and determine if there is a way to operate on the data without creating that variable
    -Test the solution
    -Identifiy Time Complexity
    -Identifiy Space Complexity
    