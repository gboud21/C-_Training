#include "PerfectHashNode.h"

//////////////////////////////////////////////////////////////////
/// PerfectHashNode<K,V>::PerfectHashNode()
//////////////////////////////////////////////////////////////////
template <typename K, typename V>
PerfectHashNode<K, V>::PerfectHashNode() : m_isFree(true), m_key(0), m_value(0)
{
}

//////////////////////////////////////////////////////////////////
/// PerfectHashNode<K,V>::~PerfectHashNode()
//////////////////////////////////////////////////////////////////
template <typename K, typename V>
PerfectHashNode<K, V>::~PerfectHashNode()
{
}

//////////////////////////////////////////////////////////////////
/// PerfectHashNode<K,V>::freeKey()
//////////////////////////////////////////////////////////////////
template <typename K, typename V>
void PerfectHashNode<K, V>::free()
{
    m_isFree = true;
}

//////////////////////////////////////////////////////////////////
/// PerfectHashNode<K,V>::isFree()
//////////////////////////////////////////////////////////////////
template <typename K, typename V>
bool PerfectHashNode<K, V>::isFree()
{
    return m_isFree;
}

//////////////////////////////////////////////////////////////////
/// PerfectHashNode<K,V>::setKey()
//////////////////////////////////////////////////////////////////
template <typename K, typename V>
void PerfectHashNode<K, V>::setKey(const K key)
{
    m_isFree = false;
    m_key = key;
}

//////////////////////////////////////////////////////////////////
/// PerfectHashNode<K,V>::getKey()
//////////////////////////////////////////////////////////////////
template <typename K, typename V>
K PerfectHashNode<K, V>::getKey()
{
    return m_key;
}

//////////////////////////////////////////////////////////////////
/// PerfectHashNode<K,V>::setValue()
//////////////////////////////////////////////////////////////////
template <typename K, typename V>
void PerfectHashNode<K, V>::setValue(const V value)
{
    m_isFree = false;
    m_value = value;
}

//////////////////////////////////////////////////////////////////
/// PerfectHashNode<K,V>::getValue()
//////////////////////////////////////////////////////////////////
template <typename K, typename V>
V PerfectHashNode<K, V>::getValue()
{
    return m_value;
}
