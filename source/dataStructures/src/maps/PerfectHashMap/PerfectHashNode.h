#ifndef PERFECTHASHNODE_H
#define PERFECTHASHNODE_H
#include <stdint.h>

template <typename K, typename V>
class PerfectHashNode
{
public:
    //////////////////////////////////////////////////////////////////
    /// \brief Constructor
    /// \param [in] value - A Constant Integer to assign to the
    ///                     constantSecretValue
    //////////////////////////////////////////////////////////////////
    PerfectHashNode();

    //////////////////////////////////////////////////////////////////
    /// \brief Destructor
    //////////////////////////////////////////////////////////////////
    ~PerfectHashNode();

    //////////////////////////////////////////////////////////////////
    /// \brief Sets the entry as free
    /// \return void
    //////////////////////////////////////////////////////////////////
    void free();

    //////////////////////////////////////////////////////////////////
    /// \brief Returns m_isFree
    /// \return void
    //////////////////////////////////////////////////////////////////
    bool isFree();

    //////////////////////////////////////////////////////////////////
    /// \brief Sets the key and marks it as not free
    /// \param [in] key - The key value to assign
    //////////////////////////////////////////////////////////////////
    void setKey(const K key);

    //////////////////////////////////////////////////////////////////
    /// \brief Returns m_key
    /// \return K
    //////////////////////////////////////////////////////////////////
    K getKey();

    //////////////////////////////////////////////////////////////////
    /// \brief Sets the value and marks it as not free
    /// \param [in] value - The value to assign
    //////////////////////////////////////////////////////////////////
    void setValue(const V value);

    //////////////////////////////////////////////////////////////////
    /// \brief Returns m_value
    /// \return V
    //////////////////////////////////////////////////////////////////
    V getValue();

private:
    // Is the node in use
    bool m_isFree;

    // The key for the node
    K m_key;

    // The value inside of the node
    V m_value;
};

#ifndef PERFECTHASHNODE_CPP
#define PERFECTHASHNODE_CPP
#include "PerfectHashNode.cpp"
#endif
#endif
