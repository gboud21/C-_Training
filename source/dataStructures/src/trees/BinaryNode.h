#ifndef BINARYNODE_H
#define BINARYNODE_H

///////////////////////////////////////////////////////////////////////////
// \details The algorithms namespace
///////////////////////////////////////////////////////////////////////////
namespace dats
{
template <typename T>
class BinaryNode
{
public:
    ///////////////////////////////////////////////////////////////////////////
    // \details Default Constructor
    // \param [in] t - the templated data to be stored in this node
    ///////////////////////////////////////////////////////////////////////////
    BinaryNode(T t);

    ///////////////////////////////////////////////////////////////////////////
    // \details Default Constructor
    // \param [in] t - the templated data to be stored in this node
    // \param [in] left - Pointer to the node to be linked as the left child of
    // this node
    // \param [in] right - Pointer to the node to be linked as the right child
    // of this node
    ///////////////////////////////////////////////////////////////////////////
    BinaryNode(T t, BinaryNode* left, BinaryNode* right);

    ///////////////////////////////////////////////////////////////////////////
    // \details Returns a reference to the value stored in this node
    // \return Reference to the value stored within the node
    ///////////////////////////////////////////////////////////////////////////
    T& getValue();

    ///////////////////////////////////////////////////////////////////////////
    // \details Sets the value of the node
    // \param [in] t - the templated data to be stored in this node
    ///////////////////////////////////////////////////////////////////////////
    void setValue(T t);

    ///////////////////////////////////////////////////////////////////////////
    // \details Returns a reference to the pointer for the left child
    // \return Reference to the pointer to the left child
    ///////////////////////////////////////////////////////////////////////////
    BinaryNode*& getLeftChild();

    ///////////////////////////////////////////////////////////////////////////
    // \details Sets the pointer to the left child
    // \param [in] left - the pointer to set the left child to
    ///////////////////////////////////////////////////////////////////////////
    void setLeftChild(BinaryNode* left);

    ///////////////////////////////////////////////////////////////////////////
    // \details Returns a reference to the pointer for the right child
    // \return Reference to the pointer to the right child
    ///////////////////////////////////////////////////////////////////////////
    BinaryNode*& getRightChild();

    ///////////////////////////////////////////////////////////////////////////
    // \details Sets the pointer to the right child
    // \param [in] right - the pointer to set the right child to
    ///////////////////////////////////////////////////////////////////////////
    void setRightChild(BinaryNode* right);

private:
    // The value represented by the node
    T m_value;

    // Pointer to the left child node
    BinaryNode* m_left;

    // Pointer to the right child node
    BinaryNode* m_right;
};
} // namespace dats
#endif

#ifndef BINARYNODE_CPP
#include "BinaryNode.cpp"
#endif